@tailwind base;
@tailwind components;
@tailwind utilities;

html {
  scroll-behavior: smooth;
}

body {
  width: 100%;
  height: 100%;
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  position: relative;
}

@layer components {
  input {
    @apply focus:border-0 focus:ring-0 focus:outline-0 active:border-0 active:ring-0 active:outline-0 ring-0 appearance-none outline-0 ;
  }

 .btn-main {
  @apply py-2 px-6 my-2 uppercase font-title font-semibold bg-rose text-white rounded-lg shadow-md hover:bg-rose hover:text-white focus:outline-none focus:ring-2  focus:ring-opacity-75;
 }

 .btn-secondary {
  @apply py-2 px-6 my-2 bg-white font-title font-semibold uppercase text-rose border-rose rounded-lg shadow-md border-2 hover:border-night hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-opacity-75;
 }

 .input-okay {
  @apply shadow-sm font-p border border-gray-300 text-night text-md py-2 px-2 rounded-xl focus:ring-rose focus:border-rose block w-full focus:border-2 focus:ring-0 focus:outline-0 active:border-2 active:ring-0 active:outline-0 ring-0 appearance-none outline-0;
 }

 .input-error {
  @apply bg-red-50 border font-p border-red-500 text-rose font-medium placeholder-red-700 text-md focus:ring-red-500 focus:border-red-500 block w-full py-1 px-2 rounded-xl dark:bg-red-100 dark:border-red-400;
 }

 .error {
  @apply text-red-600 my-1 font-semibold font-p text-sm;
 }

 label {
  @apply block my-2 text-md w-full text-left font-semibold font-p text-gray-700;
 }

 react-select-container {
  @apply font-p capitalize;
 }

 .row {
  @apply flex flex-row flex-wrap gap-1 items-center;
 }

 .col {
  @apply flex flex-col flex-wrap;
 }

 Icon {
  @apply inline;
 }

 

 .select input {
  @apply font-p capitalize
 }

 .PhoneInput {
  @apply border border-gray-300 py-1 px-2 rounded-2xl
 }

 .PhoneInput input {
  @apply focus:border-0 focus:ring-0 focus:outline-0 active:border-0 active:ring-0 active:outline-0 ring-0 appearance-none border-0 outline-0 text-md
 }

}

/* CSS variables. */
:root {
 --PhoneInput-color--focus: #03b2cb;
 --PhoneInputInternationalIconPhone-opacity: 0.8;
 --PhoneInputInternationalIconGlobe-opacity: 0.65;
 --PhoneInputCountrySelect-marginRight: 0.35em;
 --PhoneInputCountrySelectArrow-width: 0.3em;
 --PhoneInputCountrySelectArrow-marginLeft: var(--PhoneInputCountrySelect-marginRight);
 --PhoneInputCountrySelectArrow-borderWidth: 1px;
 --PhoneInputCountrySelectArrow-opacity: 0.45;
 --PhoneInputCountrySelectArrow-color: currentColor;
 --PhoneInputCountrySelectArrow-color--focus: var(--PhoneInput-color--focus);
 --PhoneInputCountrySelectArrow-transform: rotate(45deg);
 --PhoneInputCountryFlag-aspectRatio: 1.5;
 --PhoneInputCountryFlag-height: 1em;
 --PhoneInputCountryFlag-borderWidth: 1px;
 --PhoneInputCountryFlag-borderColor: rgba(41, 41, 41, 0.5);
 --PhoneInputCountryFlag-borderColor--focus: var(--PhoneInput-color--focus);
 --PhoneInputCountryFlag-backgroundColor--loading: rgba(0, 0, 0, 0.1);
}

.PhoneInput {
 /* This is done to stretch the contents of this component. */
 display: flex;
 gap: 2;
 align-items: center;
 font-family: 'Quicksand';

}



.PhoneInputInput {
 /* The phone number input stretches to fill all empty space */
 flex: 1;
 /* The phone number input should shrink
	   to make room for the extension input */
 min-width: 0;
}

.PhoneInputCountryIcon {
 width: calc(var(--PhoneInputCountryFlag-height) * var(--PhoneInputCountryFlag-aspectRatio));
 height: var(--PhoneInputCountryFlag-height);
}

.PhoneInputCountryIcon--square {
 width: var(--PhoneInputCountryFlag-height);
}

.PhoneInputCountryIcon--border {
 /* Removed `background-color` because when an `<img/>` was still loading
	   it would show a dark gray rectangle. */
 /* For some reason the `<img/>` is not stretched to 100% width and height
	   and sometime there can be seen white pixels of the background at top and bottom. */
 background-color: var(--PhoneInputCountryFlag-backgroundColor--loading);
 /* Border is added via `box-shadow` because `border` interferes with `width`/`height`. */
 /* For some reason the `<img/>` is not stretched to 100% width and height
	   and sometime there can be seen white pixels of the background at top and bottom,
	   so an additional "inset" border is added. */
 box-shadow: 0 0 0 var(--PhoneInputCountryFlag-borderWidth) var(--PhoneInputCountryFlag-borderColor),
  inset 0 0 0 var(--PhoneInputCountryFlag-borderWidth) var(--PhoneInputCountryFlag-borderColor);
}

.PhoneInputCountryIconImg {
 /* Fixes weird vertical space above the flag icon. */
 /* https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/7#note_348586559 */
 display: block;
 /* 3rd party <SVG/> flag icons won't stretch if they have `width` and `height`.
	   Also, if an <SVG/> icon's aspect ratio was different, it wouldn't fit too. */
 width: 100%;
 height: 100%;
}

.PhoneInputInternationalIconPhone {
 opacity: var(--PhoneInputInternationalIconPhone-opacity);
}

.PhoneInputInternationalIconGlobe {
 opacity: var(--PhoneInputInternationalIconGlobe-opacity);
}

/* Styling native country `<select/>`. */

.PhoneInputCountry {
 position: relative;
 align-self: stretch;
 display: flex;
 align-items: center;
 margin-right: var(--PhoneInputCountrySelect-marginRight);
}

.PhoneInputCountrySelect {
 position: absolute;
 top: 0;
 left: 0;
 height: 100%;
 width: 100%;
 z-index: 1;
 border: 1;
 opacity: 1;
 cursor: pointer;
}

.PhoneInputCountrySelect[disabled],
.PhoneInputCountrySelect[readonly] {
 cursor: default;
}

.PhoneInputCountrySelectArrow {
 display: block;
 content: '';
 width: var(--PhoneInputCountrySelectArrow-width);
 height: var(--PhoneInputCountrySelectArrow-width);
 margin-left: var(--PhoneInputCountrySelectArrow-marginLeft);
 border-style: solid;
 border-color: var(--PhoneInputCountrySelectArrow-color);
 border-top-width: 0;
 border-bottom-width: var(--PhoneInputCountrySelectArrow-borderWidth);
 border-left-width: 0;
 border-right-width: var(--PhoneInputCountrySelectArrow-borderWidth);
 transform: var(--PhoneInputCountrySelectArrow-transform);
 opacity: var(--PhoneInputCountrySelectArrow-opacity);
}

.PhoneInputCountrySelect:focus+.PhoneInputCountryIcon+.PhoneInputCountrySelectArrow {
 opacity: 0;
 color: var(--PhoneInputCountrySelectArrow-color--focus);
}

.PhoneInputCountrySelect:focus+.PhoneInputCountryIcon--border {
 box-shadow: 0 0 0 var(--PhoneInputCountryFlag-borderWidth) var(--PhoneInputCountryFlag-borderColor--focus),
  inset 0 0 0 var(--PhoneInputCountryFlag-borderWidth) var(--PhoneInputCountryFlag-borderColor--focus);
}

.PhoneInputCountrySelect:focus+.PhoneInputCountryIcon .PhoneInputInternationalIconGlobe {
 opacity: 0;
 color: var(--PhoneInputCountrySelectArrow-color--focus);
}

.swiper-button-next,
.swiper-button-prev {
  background-color: white;
  background-color: rgba(255, 255, 255, 0.5);
  right: 10px;
  padding: 30px;
  color: rgb(27, 27, 27) !important;
  fill: black !important;
  stroke: black !important;
}

/* change the size of the bullet and active color */
.swiper-pagination-bullet-active {
  background-color: #d80945;
}

.swiper-pagination-bullet {
  background-color: #f6d7dd;
  display: inline-block;
  width: 2rem;
  height: 2rem;
}

/* change color of next 2 bullets in sequence to white*/

.swiper-pagination-bullet-active-next,
.swiper-pagination-bullet-active-next-next {
  background-color: white;
}

/* change color of previous bullet to white*/

.swiper-pagination-bullet-active-prev {
  background-color: white;
}